{"version":3,"sources":["../../src/compiler/stringify.js"],"names":["singleTag","area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr","noValueAttr","stringifyAttr","key","value","JSON","stringify","ast","Array","isArray","html","node","type","text","attrs","Object","keys","attrsMap","map","hasChildren","children","length","hasAttr","tag","join","ifConditions","slice","n","block"],"mappings":"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","sourcesContent":["/**\n * @file get html from ast\n * @author cxtom(cxtom2008@gmail.com)\n */\n\n/*\n  Self-enclosing tags (stolen from node-htmlparser)\n*/\nconst singleTag = {\n    area: true,\n    base: true,\n    basefont: true,\n    br: true,\n    col: true,\n    command: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    isindex: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true\n};\n\nconst noValueAttr = {\n    's-else': true\n};\n\nfunction stringifyAttr(key, value) {\n    if (noValueAttr[key]) {\n        return key;\n    }\n    return `${key}=${JSON.stringify(value)}`;\n}\n\nexport default function stringify(ast) {\n    if (!Array.isArray(ast)) {\n        ast = [ast];\n    }\n\n    let html = '';\n\n    for (const node of ast) {\n        if (node.type === 3 || node.type === 2) {\n            html += node.text;\n        }\n        else if (node.type === 1) {\n            const attrs = Object.keys(node.attrsMap).map(key => stringifyAttr(key, node.attrsMap[key]));\n            const hasChildren = node.children && node.children.length > 0;\n            const hasAttr = attrs.length > 0;\n            html += `<${node.tag}${hasAttr ? ' ' : ''}${attrs.join(' ')}>`;\n            html += hasChildren ? stringify(node.children) : '';\n            html += !hasChildren && singleTag[node.tag] ? '' : `</${node.tag}>`;\n\n            if (node.ifConditions && node.ifConditions.length > 1) {\n                html += stringify(node.ifConditions.slice(1).map(n => n.block));\n            }\n        }\n    }\n\n    return html;\n}\n"],"file":"stringify.js"}